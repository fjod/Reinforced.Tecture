<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var implementationsCount = 8;
    var methodName = "Add";
    var resultName = "Add";    
#>

using Reinforced.Tecture.Channels;
using Reinforced.Tecture.Aspects.Orm.Toolings;
using Reinforced.Tecture.Services;
using _ = Reinforced.Tecture.Services.Tooling;

namespace Reinforced.Tecture.Aspects.Orm.Commands.Add
{
    public static partial class Extensions
    {
<# for (int toolingIndex=0; toolingIndex<implementationsCount; toolingIndex++) {	#> 
<#
    var foldArgs = string.Join("",Enumerable.Range(1,toolingIndex).Select(x=>$",_"));
    
#>

<# for (int entityIndex=1; entityIndex<=implementationsCount; entityIndex++) {	#> 
<#
    var entityParameters = string.Join(", ", Enumerable.Range(1,entityIndex).Select(x=> $"E{x}"));
    var exactTooling = $"{methodName}s<{entityParameters}>";
    var currentEntity = $"E{entityIndex}";
    
#>
        /// <summary>
        /// <#= methodName #>s entity of type <typeparamref name="E<#= entityIndex #>"/>
        /// </summary>
        /// <param name="c">ORM Channel Write End</param>
        /// <param name="entity">Entity to add</param>
        /// <returns>Fluent</returns>
        public static <#= resultName #><<#= currentEntity #>> 
            <#= methodName #><<#= entityParameters #>>(this Write<CommandChannel<Command><#= foldArgs #>, <#= exactTooling #>> c, <#= currentEntity #> entity)
        {
            return <#= methodName #>Core(c, entity);
        }
<# } #> 
<# } #> 
    }
}

<#+
    
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }
#>