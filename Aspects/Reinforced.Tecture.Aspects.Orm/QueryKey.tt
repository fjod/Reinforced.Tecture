<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	var implementationsCount = 8;
#>
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Reinforced.Tecture.Aspects.Orm.Commands.Add;
using Reinforced.Tecture.Aspects.Orm.PrimaryKey;
using Reinforced.Tecture.Tracing.Promises;

namespace Reinforced.Tecture.Aspects.Orm
{
    public abstract partial class Query
    {
        <# for (int i=1;i<implementationsCount;i++) {	#> 
        internal (<#= GenericsStroke(i+1) #>) Key<<#= GenericsStroke(i+1) #>>(IAddition<IPrimaryKey<<#= GenericsStroke(i+1) #>>> keyedAddition)
        {
            var a = (Add)keyedAddition;
            if (!a.IsExecuted) 
                throw new TectureOrmAspectException($"Cannot obtain primary key: addition of '{a.Entity}' did not happen yet");

            string explanation = $"Get primary key of added {a.EntityType.Name}";

            var p = Aux.Promise<(<#= GenericsStroke(i+1) #>)>();
            if (p is Containing<(<#= GenericsStroke(i+1) #>)> c)
                return c.Get($"ORM_AdditionPK_{a.Order}", explanation);

             var tmp = GetKey(a, GetKeyProperties<#= i+1 #><<#= GenericsStroke(i+1) #>>(a)).ToArray();
            var result = (<#= TupleCast(i+1, "tmp") #>);
            
            if (p is Demanding<(<#= GenericsStroke(i+1) #>)> d)
                d.Fullfill(result, $"ORM_AdditionPK_{a.Order}", explanation);

            return result;           

        }

        private IEnumerable<PropertyInfo> GetKeyProperties<#= i+1 #><<#= GenericsStroke(i+1) #>>(Add addition)
        {
            var e = (IPrimaryKey<<#= GenericsStroke(i+1) #>>)addition.Entity;
            var pk = e.PrimaryKey; 
            <# for (int j=1;j<=i+1;j++) {	#> 
            yield return pk.Item<#= j #>.AsPropertyExpression(); <# } #>

        }
        <# } #>
    
    }
}

<#+

    private string TupleCast(int num, string arrayId)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("(T"); sb.Append(i+1);
            sb.Append(") ");
            sb.Append(arrayId);
            sb.Append("[");
            sb.Append(i);
            sb.Append("]");
		}
		return sb.ToString();
    }

    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("T"); sb.Append(i+1);
		}
		return sb.ToString();
    }
#>