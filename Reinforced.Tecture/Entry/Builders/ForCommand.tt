<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var implementationsCount = 16;
#>

using Reinforced.Tecture.Channels;
using Reinforced.Tecture.Channels.Multiplexer;
using Reinforced.Tecture.Commands;
using Reinforced.Tecture.Savers;

namespace Reinforced.Tecture.Entry.Builders
{
	public static partial class Extensions
    {
<# for (int i=0;i<implementationsCount;i++) {	#> 

		/// <summary>
        /// Configures saver for channel
        /// </summary>
        /// <typeparam name="TAspect">Aspect type</typeparam>		<# for (int k=0;k<i+1;k++) {	#> 
		/// <typeparam name="TCommand<#= k+1 #>">Type of command #<#= k+1 #> that is being supported by aspect</typeparam><# } #> 
        /// <param name="cf">Channel configuration</param>
        /// <param name="aspect">Command aspect instance</param>
        /// <param name="saver">Corresponding saver instance</param>
		public static void ForCommand<TAspect, <#= GenericsStroke(i+1) #>>(this ChannelBinding<CommandChannel<TAspect>> cf, TAspect aspect, Saver<<#= GenericsStroke(i+1) #>> saver)
            where TAspect : CommandAspect, Produces<<#= GenericsStroke(i+1) #>>
            <#= Constraints(i+1, "CommandBase") #>
        {
            var holder = cf as MultiplexerRegistrationDecorator;
            holder.RegisterCommandAspect(typeof(TAspect), aspect);
            holder.RegisterSaver(saver);
        }
<# } #>
	}
}

<#+
    private string GenericsStroke(int num)
    {
        StringBuilder sb = new StringBuilder();
		bool first = true;
		for(var i=0;i<num;i++){
			if (!first) sb.Append(", ");
			else first = false;
			sb.Append("TCommand"); sb.Append(i+1);
		}
		return sb.ToString();
    }

	private string Constraints(int num, string constraint)
    {
        StringBuilder sb = new StringBuilder();
		
		for(var i=0;i<num;i++){
			
			sb.Append("where TCommand"); sb.Append(i+1);
			sb.Append(" : "); sb.AppendLine(constraint);
		}
		return sb.ToString();
    }

	private string Properties(int num, string namePrefix)
    {
        StringBuilder sb = new StringBuilder();
		
		for(var i=0;i<num;i++){
			
			sb.Append("ICommandRunner<TCommand"); sb.Append(i+1);
			sb.Append("> "); sb.Append(namePrefix); sb.Append(i+1);
			sb.AppendLine(" { get; }");
		}
		return sb.ToString();
    }
#>

