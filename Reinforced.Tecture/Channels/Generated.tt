<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var implementationsCount = 8;
#>

using Reinforced.Tecture.Commands;
using Reinforced.Tecture.Channels.Multiplexer;
using Reinforced.Tecture.Services;

// ReSharper disable UnusedTypeParameter

namespace Reinforced.Tecture.Channels
{
<# for (int i=0;i<implementationsCount;i++) {	#> 
	
	#region Setup for <#= i+1 #> entities

	#region Read

	/// <summary>
	/// Channel's read end for <#= i+1 #> entities
	/// </summary>
	/// <typeparam name="TChannel">Type of channel</typeparam>
<# for(int k=0;k<=i;k++) { #>
	/// <typeparam name="T<#= k+1 #>">Tooling of type # <#= k+1 #></typeparam>
<# } #>
	public interface Read<out TChannel <#= GenericsStroke(i+1, true) #>> : Read<TChannel<#= GenericsStroke(i) #>> 
		where TChannel : CanQuery 
<# for(int k=0;k<=i;k++) { #>
		where T<#= k+1 #> : Tooling
<# } #>	{ }

	internal struct SRead<TChannel <#= GenericsStroke(i+1) #>>
		: IQueryMultiplexer, Read<TChannel <#= GenericsStroke(i+1) #>>
		where TChannel : CanQuery
<# for(int k=0;k<=i;k++) { #>
		where T<#= k+1 #> : Tooling
<# } #>	
	{
		private readonly ChannelMultiplexer _cm;
		
		public SRead(ChannelMultiplexer cm)
		{
			_cm = cm;		
		}

		public TAspect GetAspect<TAspect>() where TAspect : QueryAspect 
		{
			return _cm.GetQueryAspect<TChannel,TAspect>();
		}
	}

	#endregion

	#region Write
	/// <summary>
	/// Channel's write end for <#= i+1 #> entities
	/// </summary>
	/// <typeparam name="TChannel">Type of channel</typeparam>
<# for(int k=0;k<=i;k++) { #>
	/// <typeparam name="T<#= k+1 #>">Tooling of type # <#= k+1 #></typeparam>
<# } #>
	public interface Write<out TChannel<#= GenericsStroke(i+1, true) #>> : Write<TChannel<#= GenericsStroke(i) #>> 
		where TChannel : CanCommand 
<# for(int k=0;k<=i;k++) { #>
		where T<#= k+1 #> : Tooling
<# } #>	{ }

	internal struct SWrite<TChannel<#= GenericsStroke(i+1) #>>
		: ICommandMultiplexer, Write<TChannel<#= GenericsStroke(i+1) #>>
		where TChannel : CanCommand
<# for(int k=0;k<=i;k++) { #>
		where T<#= k+1 #> : Tooling
<# } #>	
	{
		private readonly ChannelMultiplexer _cm;
		private readonly Pipeline _pipeline;
		public SWrite(ChannelMultiplexer cm, Pipeline p)
		{
			_cm = cm;
			_pipeline = p;
		}

		public TAspect GetAspect<TAspect>() where TAspect : CommandAspect 
		{
			return _cm.GetCommandAspect<TChannel,TAspect>();
		}

		public TCmd Put<TCmd>(TCmd command) where TCmd : CommandBase
		{
			command.ChannelId = typeof(TChannel).FullName;
			command.ChannelName = typeof(TChannel).Name;
			_pipeline.Enqueue(command);
			return command;
		}

		 public ActionsQueue Save { get { return _pipeline.PostSaveActions;} }

		 public ActionsQueue Final { get { return _pipeline.FinallyActions; } }
	}
	#endregion 

	#endregion
	<# } #>
}

<#+
    private string GenericsStroke(int num, bool nout = false)
    {
        StringBuilder sb = new StringBuilder();
		for(var i=0;i<num;i++){
			if (nout) sb.Append(", out T");
			else sb.Append(", T");
			sb.Append(i+1);
		}
		return sb.ToString();
    }
#>